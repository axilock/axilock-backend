services:
  db:
    image: postgres:16
    restart: always
    container_name: db
    ports:
      - 127.0.0.1:5432:5432
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=secure
      - POSTGRES_DB=axilockdb
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d axilockdb -U admin" ]
      interval: 5s
      timeout: 10s
      retries: 2
    volumes:
      - pgdata:/var/lib/postgresql/data
  # migrate:
  #   image: migrate/migrate
  #   entrypoint: [
  #     "sh", "-c",
  #     "migrate -path /migrations -database postgresql://admin:secure@db:5432/axilockdb?sslmode=disable up"
  #   ]
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   volumes:
  #     - ./migrations:/migrations
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend
    restart: always
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    ports:
      - 8090:8090
      - 8080:8080
    env_file:
      - .env
    environment:
      REDIS_ADDR: cache:6379
      DB_SOURCE: postgresql://admin:secure@db:5432/axilockdb?sslmode=disable
      REDIS_PASS: eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
      
  cache:  
    image: redis:7.4.1-alpine
    container_name: cache
    restart: always
    ports:
      - '127.0.0.1:6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes: 
      - cache:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 2s
      timeout: 10s
      retries: 2
  # clickhouse-server:
  #   image: clickhouse/clickhouse-server:24.3.6-alpine
  #   container_name: clickhouse-server
  #   ulimits:
  #     nofile:
  #       soft: 262144
  #       hard: 262144
  #   ports:
  #     - 9000:9000/tcp
  #   environment:
  #     CLICKHOUSE_DB: sekrit
  #     CLICKHOUSE_USER: admin
  #     CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
  #     CLICKHOUSE_PASSWORD: secure
  #   volumes:
  #     - cldata:/var/lib/clickhouse
  #     - cllogs:/var/log/clickhouse-server
  #   cap_add:
  #     - SYS_NICE
  #     - NET_ADMIN
  #     - IPC_LOCK
  #     - SYS_PTRACE
  # zoo1:
  #   image: confluentinc/cp-zookeeper:7.4.4
  #   hostname: zoo1
  #   container_name: zoo1
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_SERVER_ID: 1
  #     ZOOKEEPER_SERVERS: zoo1:2888:3888

  # kafka1:
  #   image: confluentinc/cp-kafka:7.4.4
  #   hostname: kafka1
  #   container_name: kafka1
  #   ports:
  #     - "9092:9092"
  #     - "29092:29092"
  #     - "9999:9999"
  #   environment:
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #     KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_JMX_PORT: 9999
  #     KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
  #     KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
  #     KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
  #   depends_on:
  #     - zoo1

volumes:
  pgdata:
    driver: local
  cache:
    driver: local
  cldata:
    driver: local
  cllogs:
    driver: local
  