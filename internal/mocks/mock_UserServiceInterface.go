// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/axilock/axilock-backend/internal/db/sqlc"
	mock "github.com/stretchr/testify/mock"
)

// UserServiceInterface is an autogenerated mock type for the UserServiceInterface type
type UserServiceInterface struct {
	mock.Mock
}

type UserServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UserServiceInterface) EXPECT() *UserServiceInterface_Expecter {
	return &UserServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateUserWithGithub provides a mock function with given fields: ctx, code, provider
func (_m *UserServiceInterface) CreateUserWithGithub(ctx context.Context, code string, provider string) (db.User, error) {
	ret := _m.Called(ctx, code, provider)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserWithGithub")
	}

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (db.User, error)); ok {
		return rf(ctx, code, provider)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) db.User); ok {
		r0 = rf(ctx, code, provider)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, code, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserServiceInterface_CreateUserWithGithub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserWithGithub'
type UserServiceInterface_CreateUserWithGithub_Call struct {
	*mock.Call
}

// CreateUserWithGithub is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - provider string
func (_e *UserServiceInterface_Expecter) CreateUserWithGithub(ctx interface{}, code interface{}, provider interface{}) *UserServiceInterface_CreateUserWithGithub_Call {
	return &UserServiceInterface_CreateUserWithGithub_Call{Call: _e.mock.On("CreateUserWithGithub", ctx, code, provider)}
}

func (_c *UserServiceInterface_CreateUserWithGithub_Call) Run(run func(ctx context.Context, code string, provider string)) *UserServiceInterface_CreateUserWithGithub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserServiceInterface_CreateUserWithGithub_Call) Return(_a0 db.User, _a1 error) *UserServiceInterface_CreateUserWithGithub_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserServiceInterface_CreateUserWithGithub_Call) RunAndReturn(run func(context.Context, string, string) (db.User, error)) *UserServiceInterface_CreateUserWithGithub_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserServiceInterface) GetUserByEmail(ctx context.Context, email string) (db.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserServiceInterface_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type UserServiceInterface_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserServiceInterface_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *UserServiceInterface_GetUserByEmail_Call {
	return &UserServiceInterface_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *UserServiceInterface_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *UserServiceInterface_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserServiceInterface_GetUserByEmail_Call) Return(_a0 db.User, _a1 error) *UserServiceInterface_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserServiceInterface_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (db.User, error)) *UserServiceInterface_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByGithubID provides a mock function with given fields: ctx, githubID
func (_m *UserServiceInterface) GetUserByGithubID(ctx context.Context, githubID int64) (db.User, error) {
	ret := _m.Called(ctx, githubID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByGithubID")
	}

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.User, error)); ok {
		return rf(ctx, githubID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.User); ok {
		r0 = rf(ctx, githubID)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, githubID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserServiceInterface_GetUserByGithubID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByGithubID'
type UserServiceInterface_GetUserByGithubID_Call struct {
	*mock.Call
}

// GetUserByGithubID is a helper method to define mock.On call
//   - ctx context.Context
//   - githubID int64
func (_e *UserServiceInterface_Expecter) GetUserByGithubID(ctx interface{}, githubID interface{}) *UserServiceInterface_GetUserByGithubID_Call {
	return &UserServiceInterface_GetUserByGithubID_Call{Call: _e.mock.On("GetUserByGithubID", ctx, githubID)}
}

func (_c *UserServiceInterface_GetUserByGithubID_Call) Run(run func(ctx context.Context, githubID int64)) *UserServiceInterface_GetUserByGithubID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UserServiceInterface_GetUserByGithubID_Call) Return(_a0 db.User, _a1 error) *UserServiceInterface_GetUserByGithubID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserServiceInterface_GetUserByGithubID_Call) RunAndReturn(run func(context.Context, int64) (db.User, error)) *UserServiceInterface_GetUserByGithubID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *UserServiceInterface) GetUserByID(ctx context.Context, userID string) (db.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserServiceInterface_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UserServiceInterface_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *UserServiceInterface_Expecter) GetUserByID(ctx interface{}, userID interface{}) *UserServiceInterface_GetUserByID_Call {
	return &UserServiceInterface_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, userID)}
}

func (_c *UserServiceInterface_GetUserByID_Call) Run(run func(ctx context.Context, userID string)) *UserServiceInterface_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserServiceInterface_GetUserByID_Call) Return(_a0 db.User, _a1 error) *UserServiceInterface_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserServiceInterface_GetUserByID_Call) RunAndReturn(run func(context.Context, string) (db.User, error)) *UserServiceInterface_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserServiceInterface creates a new instance of UserServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserServiceInterface {
	mock := &UserServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
