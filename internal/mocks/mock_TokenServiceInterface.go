// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TokenServiceInterface is an autogenerated mock type for the TokenServiceInterface type
type TokenServiceInterface struct {
	mock.Mock
}

type TokenServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenServiceInterface) EXPECT() *TokenServiceInterface_Expecter {
	return &TokenServiceInterface_Expecter{mock: &_m.Mock}
}

// DeleteCliSessionToken provides a mock function with given fields: ctx, token
func (_m *TokenServiceInterface) DeleteCliSessionToken(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCliSessionToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TokenServiceInterface_DeleteCliSessionToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCliSessionToken'
type TokenServiceInterface_DeleteCliSessionToken_Call struct {
	*mock.Call
}

// DeleteCliSessionToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *TokenServiceInterface_Expecter) DeleteCliSessionToken(ctx interface{}, token interface{}) *TokenServiceInterface_DeleteCliSessionToken_Call {
	return &TokenServiceInterface_DeleteCliSessionToken_Call{Call: _e.mock.On("DeleteCliSessionToken", ctx, token)}
}

func (_c *TokenServiceInterface_DeleteCliSessionToken_Call) Run(run func(ctx context.Context, token string)) *TokenServiceInterface_DeleteCliSessionToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TokenServiceInterface_DeleteCliSessionToken_Call) Return(_a0 error) *TokenServiceInterface_DeleteCliSessionToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TokenServiceInterface_DeleteCliSessionToken_Call) RunAndReturn(run func(context.Context, string) error) *TokenServiceInterface_DeleteCliSessionToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetSuccessForToken provides a mock function with given fields: ctx, token
func (_m *TokenServiceInterface) GetSuccessForToken(ctx context.Context, token string) (string, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetSuccessForToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenServiceInterface_GetSuccessForToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSuccessForToken'
type TokenServiceInterface_GetSuccessForToken_Call struct {
	*mock.Call
}

// GetSuccessForToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *TokenServiceInterface_Expecter) GetSuccessForToken(ctx interface{}, token interface{}) *TokenServiceInterface_GetSuccessForToken_Call {
	return &TokenServiceInterface_GetSuccessForToken_Call{Call: _e.mock.On("GetSuccessForToken", ctx, token)}
}

func (_c *TokenServiceInterface_GetSuccessForToken_Call) Run(run func(ctx context.Context, token string)) *TokenServiceInterface_GetSuccessForToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TokenServiceInterface_GetSuccessForToken_Call) Return(_a0 string, _a1 error) *TokenServiceInterface_GetSuccessForToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenServiceInterface_GetSuccessForToken_Call) RunAndReturn(run func(context.Context, string) (string, error)) *TokenServiceInterface_GetSuccessForToken_Call {
	_c.Call.Return(run)
	return _c
}

// SetCliToken provides a mock function with given fields: ctx, token, val
func (_m *TokenServiceInterface) SetCliToken(ctx context.Context, token string, val string) error {
	ret := _m.Called(ctx, token, val)

	if len(ret) == 0 {
		panic("no return value specified for SetCliToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, token, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TokenServiceInterface_SetCliToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCliToken'
type TokenServiceInterface_SetCliToken_Call struct {
	*mock.Call
}

// SetCliToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - val string
func (_e *TokenServiceInterface_Expecter) SetCliToken(ctx interface{}, token interface{}, val interface{}) *TokenServiceInterface_SetCliToken_Call {
	return &TokenServiceInterface_SetCliToken_Call{Call: _e.mock.On("SetCliToken", ctx, token, val)}
}

func (_c *TokenServiceInterface_SetCliToken_Call) Run(run func(ctx context.Context, token string, val string)) *TokenServiceInterface_SetCliToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TokenServiceInterface_SetCliToken_Call) Return(_a0 error) *TokenServiceInterface_SetCliToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TokenServiceInterface_SetCliToken_Call) RunAndReturn(run func(context.Context, string, string) error) *TokenServiceInterface_SetCliToken_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateToken provides a mock function with given fields: ctx, token, val
func (_m *TokenServiceInterface) UpdateToken(ctx context.Context, token string, val string) error {
	ret := _m.Called(ctx, token, val)

	if len(ret) == 0 {
		panic("no return value specified for UpdateToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, token, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TokenServiceInterface_UpdateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateToken'
type TokenServiceInterface_UpdateToken_Call struct {
	*mock.Call
}

// UpdateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - val string
func (_e *TokenServiceInterface_Expecter) UpdateToken(ctx interface{}, token interface{}, val interface{}) *TokenServiceInterface_UpdateToken_Call {
	return &TokenServiceInterface_UpdateToken_Call{Call: _e.mock.On("UpdateToken", ctx, token, val)}
}

func (_c *TokenServiceInterface_UpdateToken_Call) Run(run func(ctx context.Context, token string, val string)) *TokenServiceInterface_UpdateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TokenServiceInterface_UpdateToken_Call) Return(_a0 error) *TokenServiceInterface_UpdateToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TokenServiceInterface_UpdateToken_Call) RunAndReturn(run func(context.Context, string, string) error) *TokenServiceInterface_UpdateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewTokenServiceInterface creates a new instance of TokenServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenServiceInterface {
	mock := &TokenServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
