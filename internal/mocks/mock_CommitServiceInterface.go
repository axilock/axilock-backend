// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	commitsvc "github.com/axilock/axilock-backend/internal/service/commitsvc"

	mock "github.com/stretchr/testify/mock"
)

// CommitServiceInterface is an autogenerated mock type for the CommitServiceInterface type
type CommitServiceInterface struct {
	mock.Mock
}

type CommitServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *CommitServiceInterface) EXPECT() *CommitServiceInterface_Expecter {
	return &CommitServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateCommitsForSession provides a mock function with given fields: ctx, req, sessionID
func (_m *CommitServiceInterface) CreateCommitsForSession(ctx context.Context, req commitsvc.CreateCommitGrpcReq, sessionID string) error {
	ret := _m.Called(ctx, req, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for CreateCommitsForSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commitsvc.CreateCommitGrpcReq, string) error); ok {
		r0 = rf(ctx, req, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommitServiceInterface_CreateCommitsForSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCommitsForSession'
type CommitServiceInterface_CreateCommitsForSession_Call struct {
	*mock.Call
}

// CreateCommitsForSession is a helper method to define mock.On call
//   - ctx context.Context
//   - req commitsvc.CreateCommitGrpcReq
//   - sessionID string
func (_e *CommitServiceInterface_Expecter) CreateCommitsForSession(ctx interface{}, req interface{}, sessionID interface{}) *CommitServiceInterface_CreateCommitsForSession_Call {
	return &CommitServiceInterface_CreateCommitsForSession_Call{Call: _e.mock.On("CreateCommitsForSession", ctx, req, sessionID)}
}

func (_c *CommitServiceInterface_CreateCommitsForSession_Call) Run(run func(ctx context.Context, req commitsvc.CreateCommitGrpcReq, sessionID string)) *CommitServiceInterface_CreateCommitsForSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(commitsvc.CreateCommitGrpcReq), args[2].(string))
	})
	return _c
}

func (_c *CommitServiceInterface_CreateCommitsForSession_Call) Return(_a0 error) *CommitServiceInterface_CreateCommitsForSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CommitServiceInterface_CreateCommitsForSession_Call) RunAndReturn(run func(context.Context, commitsvc.CreateCommitGrpcReq, string) error) *CommitServiceInterface_CreateCommitsForSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommitByCommitID provides a mock function with given fields: ctx, commitID
func (_m *CommitServiceInterface) GetCommitByCommitID(ctx context.Context, commitID string) (int64, error) {
	ret := _m.Called(ctx, commitID)

	if len(ret) == 0 {
		panic("no return value specified for GetCommitByCommitID")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, commitID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, commitID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, commitID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommitServiceInterface_GetCommitByCommitID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommitByCommitID'
type CommitServiceInterface_GetCommitByCommitID_Call struct {
	*mock.Call
}

// GetCommitByCommitID is a helper method to define mock.On call
//   - ctx context.Context
//   - commitID string
func (_e *CommitServiceInterface_Expecter) GetCommitByCommitID(ctx interface{}, commitID interface{}) *CommitServiceInterface_GetCommitByCommitID_Call {
	return &CommitServiceInterface_GetCommitByCommitID_Call{Call: _e.mock.On("GetCommitByCommitID", ctx, commitID)}
}

func (_c *CommitServiceInterface_GetCommitByCommitID_Call) Run(run func(ctx context.Context, commitID string)) *CommitServiceInterface_GetCommitByCommitID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CommitServiceInterface_GetCommitByCommitID_Call) Return(_a0 int64, _a1 error) *CommitServiceInterface_GetCommitByCommitID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommitServiceInterface_GetCommitByCommitID_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *CommitServiceInterface_GetCommitByCommitID_Call {
	_c.Call.Return(run)
	return _c
}

// NewCommitServiceInterface creates a new instance of CommitServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommitServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommitServiceInterface {
	mock := &CommitServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
