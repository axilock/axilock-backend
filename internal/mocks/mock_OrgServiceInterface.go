// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/axilock/axilock-backend/internal/db/sqlc"
	mock "github.com/stretchr/testify/mock"
)

// OrgServiceInterface is an autogenerated mock type for the OrgServiceInterface type
type OrgServiceInterface struct {
	mock.Mock
}

type OrgServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *OrgServiceInterface) EXPECT() *OrgServiceInterface_Expecter {
	return &OrgServiceInterface_Expecter{mock: &_m.Mock}
}

// GetOrgByID provides a mock function with given fields: ctx, id
func (_m *OrgServiceInterface) GetOrgByID(ctx context.Context, id int64) (db.Organisation, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgByID")
	}

	var r0 db.Organisation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.Organisation, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Organisation); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Organisation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgServiceInterface_GetOrgByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgByID'
type OrgServiceInterface_GetOrgByID_Call struct {
	*mock.Call
}

// GetOrgByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *OrgServiceInterface_Expecter) GetOrgByID(ctx interface{}, id interface{}) *OrgServiceInterface_GetOrgByID_Call {
	return &OrgServiceInterface_GetOrgByID_Call{Call: _e.mock.On("GetOrgByID", ctx, id)}
}

func (_c *OrgServiceInterface_GetOrgByID_Call) Run(run func(ctx context.Context, id int64)) *OrgServiceInterface_GetOrgByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *OrgServiceInterface_GetOrgByID_Call) Return(_a0 db.Organisation, _a1 error) *OrgServiceInterface_GetOrgByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrgServiceInterface_GetOrgByID_Call) RunAndReturn(run func(context.Context, int64) (db.Organisation, error)) *OrgServiceInterface_GetOrgByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgbyGithubOrgID provides a mock function with given fields: ctx, orgID
func (_m *OrgServiceInterface) GetOrgbyGithubOrgID(ctx context.Context, orgID int64) (db.Organisation, error) {
	ret := _m.Called(ctx, orgID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgbyGithubOrgID")
	}

	var r0 db.Organisation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.Organisation, error)); ok {
		return rf(ctx, orgID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Organisation); ok {
		r0 = rf(ctx, orgID)
	} else {
		r0 = ret.Get(0).(db.Organisation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgServiceInterface_GetOrgbyGithubOrgID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgbyGithubOrgID'
type OrgServiceInterface_GetOrgbyGithubOrgID_Call struct {
	*mock.Call
}

// GetOrgbyGithubOrgID is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID int64
func (_e *OrgServiceInterface_Expecter) GetOrgbyGithubOrgID(ctx interface{}, orgID interface{}) *OrgServiceInterface_GetOrgbyGithubOrgID_Call {
	return &OrgServiceInterface_GetOrgbyGithubOrgID_Call{Call: _e.mock.On("GetOrgbyGithubOrgID", ctx, orgID)}
}

func (_c *OrgServiceInterface_GetOrgbyGithubOrgID_Call) Run(run func(ctx context.Context, orgID int64)) *OrgServiceInterface_GetOrgbyGithubOrgID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *OrgServiceInterface_GetOrgbyGithubOrgID_Call) Return(_a0 db.Organisation, _a1 error) *OrgServiceInterface_GetOrgbyGithubOrgID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrgServiceInterface_GetOrgbyGithubOrgID_Call) RunAndReturn(run func(context.Context, int64) (db.Organisation, error)) *OrgServiceInterface_GetOrgbyGithubOrgID_Call {
	_c.Call.Return(run)
	return _c
}

// GetReposForOrg provides a mock function with given fields: ctx, org
func (_m *OrgServiceInterface) GetReposForOrg(ctx context.Context, org int64) (int64, error) {
	ret := _m.Called(ctx, org)

	if len(ret) == 0 {
		panic("no return value specified for GetReposForOrg")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int64, error)); ok {
		return rf(ctx, org)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, org)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgServiceInterface_GetReposForOrg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReposForOrg'
type OrgServiceInterface_GetReposForOrg_Call struct {
	*mock.Call
}

// GetReposForOrg is a helper method to define mock.On call
//   - ctx context.Context
//   - org int64
func (_e *OrgServiceInterface_Expecter) GetReposForOrg(ctx interface{}, org interface{}) *OrgServiceInterface_GetReposForOrg_Call {
	return &OrgServiceInterface_GetReposForOrg_Call{Call: _e.mock.On("GetReposForOrg", ctx, org)}
}

func (_c *OrgServiceInterface_GetReposForOrg_Call) Run(run func(ctx context.Context, org int64)) *OrgServiceInterface_GetReposForOrg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *OrgServiceInterface_GetReposForOrg_Call) Return(_a0 int64, _a1 error) *OrgServiceInterface_GetReposForOrg_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrgServiceInterface_GetReposForOrg_Call) RunAndReturn(run func(context.Context, int64) (int64, error)) *OrgServiceInterface_GetReposForOrg_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrgServiceInterface creates a new instance of OrgServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrgServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrgServiceInterface {
	mock := &OrgServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
