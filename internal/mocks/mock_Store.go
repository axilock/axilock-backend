// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/axilock/axilock-backend/internal/db/sqlc"
	mock "github.com/stretchr/testify/mock"

	pgtype "github.com/jackc/pgx/v5/pgtype"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

type Store_Expecter struct {
	mock *mock.Mock
}

func (_m *Store) EXPECT() *Store_Expecter {
	return &Store_Expecter{mock: &_m.Mock}
}

// CreateAlertConfig provides a mock function with given fields: ctx, arg
func (_m *Store) CreateAlertConfig(ctx context.Context, arg db.CreateAlertConfigParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateAlertConfig")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateAlertConfigParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateAlertConfigParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateAlertConfigParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateAlertConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAlertConfig'
type Store_CreateAlertConfig_Call struct {
	*mock.Call
}

// CreateAlertConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateAlertConfigParams
func (_e *Store_Expecter) CreateAlertConfig(ctx interface{}, arg interface{}) *Store_CreateAlertConfig_Call {
	return &Store_CreateAlertConfig_Call{Call: _e.mock.On("CreateAlertConfig", ctx, arg)}
}

func (_c *Store_CreateAlertConfig_Call) Run(run func(ctx context.Context, arg db.CreateAlertConfigParams)) *Store_CreateAlertConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateAlertConfigParams))
	})
	return _c
}

func (_c *Store_CreateAlertConfig_Call) Return(_a0 int64, _a1 error) *Store_CreateAlertConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateAlertConfig_Call) RunAndReturn(run func(context.Context, db.CreateAlertConfigParams) (int64, error)) *Store_CreateAlertConfig_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCommmitsFromRPC provides a mock function with given fields: ctx, arg
func (_m *Store) CreateCommmitsFromRPC(ctx context.Context, arg []db.CreateCommmitsFromRPCParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateCommmitsFromRPC")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []db.CreateCommmitsFromRPCParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []db.CreateCommmitsFromRPCParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []db.CreateCommmitsFromRPCParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateCommmitsFromRPC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCommmitsFromRPC'
type Store_CreateCommmitsFromRPC_Call struct {
	*mock.Call
}

// CreateCommmitsFromRPC is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []db.CreateCommmitsFromRPCParams
func (_e *Store_Expecter) CreateCommmitsFromRPC(ctx interface{}, arg interface{}) *Store_CreateCommmitsFromRPC_Call {
	return &Store_CreateCommmitsFromRPC_Call{Call: _e.mock.On("CreateCommmitsFromRPC", ctx, arg)}
}

func (_c *Store_CreateCommmitsFromRPC_Call) Run(run func(ctx context.Context, arg []db.CreateCommmitsFromRPCParams)) *Store_CreateCommmitsFromRPC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]db.CreateCommmitsFromRPCParams))
	})
	return _c
}

func (_c *Store_CreateCommmitsFromRPC_Call) Return(_a0 int64, _a1 error) *Store_CreateCommmitsFromRPC_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateCommmitsFromRPC_Call) RunAndReturn(run func(context.Context, []db.CreateCommmitsFromRPCParams) (int64, error)) *Store_CreateCommmitsFromRPC_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGithubInstallation provides a mock function with given fields: ctx, arg
func (_m *Store) CreateGithubInstallation(ctx context.Context, arg db.CreateGithubInstallationParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateGithubInstallation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateGithubInstallationParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_CreateGithubInstallation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGithubInstallation'
type Store_CreateGithubInstallation_Call struct {
	*mock.Call
}

// CreateGithubInstallation is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateGithubInstallationParams
func (_e *Store_Expecter) CreateGithubInstallation(ctx interface{}, arg interface{}) *Store_CreateGithubInstallation_Call {
	return &Store_CreateGithubInstallation_Call{Call: _e.mock.On("CreateGithubInstallation", ctx, arg)}
}

func (_c *Store_CreateGithubInstallation_Call) Run(run func(ctx context.Context, arg db.CreateGithubInstallationParams)) *Store_CreateGithubInstallation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateGithubInstallationParams))
	})
	return _c
}

func (_c *Store_CreateGithubInstallation_Call) Return(_a0 error) *Store_CreateGithubInstallation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_CreateGithubInstallation_Call) RunAndReturn(run func(context.Context, db.CreateGithubInstallationParams) error) *Store_CreateGithubInstallation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMetaData provides a mock function with given fields: ctx, arg
func (_m *Store) CreateMetaData(ctx context.Context, arg db.CreateMetaDataParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateMetaData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateMetaDataParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_CreateMetaData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMetaData'
type Store_CreateMetaData_Call struct {
	*mock.Call
}

// CreateMetaData is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateMetaDataParams
func (_e *Store_Expecter) CreateMetaData(ctx interface{}, arg interface{}) *Store_CreateMetaData_Call {
	return &Store_CreateMetaData_Call{Call: _e.mock.On("CreateMetaData", ctx, arg)}
}

func (_c *Store_CreateMetaData_Call) Run(run func(ctx context.Context, arg db.CreateMetaDataParams)) *Store_CreateMetaData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateMetaDataParams))
	})
	return _c
}

func (_c *Store_CreateMetaData_Call) Return(_a0 error) *Store_CreateMetaData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_CreateMetaData_Call) RunAndReturn(run func(context.Context, db.CreateMetaDataParams) error) *Store_CreateMetaData_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganiation provides a mock function with given fields: ctx, arg
func (_m *Store) CreateOrganiation(ctx context.Context, arg db.CreateOrganiationParams) (db.Organisation, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganiation")
	}

	var r0 db.Organisation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateOrganiationParams) (db.Organisation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateOrganiationParams) db.Organisation); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Organisation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateOrganiationParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateOrganiation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganiation'
type Store_CreateOrganiation_Call struct {
	*mock.Call
}

// CreateOrganiation is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateOrganiationParams
func (_e *Store_Expecter) CreateOrganiation(ctx interface{}, arg interface{}) *Store_CreateOrganiation_Call {
	return &Store_CreateOrganiation_Call{Call: _e.mock.On("CreateOrganiation", ctx, arg)}
}

func (_c *Store_CreateOrganiation_Call) Run(run func(ctx context.Context, arg db.CreateOrganiationParams)) *Store_CreateOrganiation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateOrganiationParams))
	})
	return _c
}

func (_c *Store_CreateOrganiation_Call) Return(_a0 db.Organisation, _a1 error) *Store_CreateOrganiation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateOrganiation_Call) RunAndReturn(run func(context.Context, db.CreateOrganiationParams) (db.Organisation, error)) *Store_CreateOrganiation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRepoWithProvider provides a mock function with given fields: ctx, arg
func (_m *Store) CreateRepoWithProvider(ctx context.Context, arg []db.CreateRepoWithProviderParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateRepoWithProvider")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []db.CreateRepoWithProviderParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []db.CreateRepoWithProviderParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []db.CreateRepoWithProviderParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateRepoWithProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRepoWithProvider'
type Store_CreateRepoWithProvider_Call struct {
	*mock.Call
}

// CreateRepoWithProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []db.CreateRepoWithProviderParams
func (_e *Store_Expecter) CreateRepoWithProvider(ctx interface{}, arg interface{}) *Store_CreateRepoWithProvider_Call {
	return &Store_CreateRepoWithProvider_Call{Call: _e.mock.On("CreateRepoWithProvider", ctx, arg)}
}

func (_c *Store_CreateRepoWithProvider_Call) Run(run func(ctx context.Context, arg []db.CreateRepoWithProviderParams)) *Store_CreateRepoWithProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]db.CreateRepoWithProviderParams))
	})
	return _c
}

func (_c *Store_CreateRepoWithProvider_Call) Return(_a0 int64, _a1 error) *Store_CreateRepoWithProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateRepoWithProvider_Call) RunAndReturn(run func(context.Context, []db.CreateRepoWithProviderParams) (int64, error)) *Store_CreateRepoWithProvider_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSecretAlert provides a mock function with given fields: ctx, arg
func (_m *Store) CreateSecretAlert(ctx context.Context, arg db.CreateSecretAlertParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateSecretAlert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateSecretAlertParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_CreateSecretAlert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSecretAlert'
type Store_CreateSecretAlert_Call struct {
	*mock.Call
}

// CreateSecretAlert is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateSecretAlertParams
func (_e *Store_Expecter) CreateSecretAlert(ctx interface{}, arg interface{}) *Store_CreateSecretAlert_Call {
	return &Store_CreateSecretAlert_Call{Call: _e.mock.On("CreateSecretAlert", ctx, arg)}
}

func (_c *Store_CreateSecretAlert_Call) Run(run func(ctx context.Context, arg db.CreateSecretAlertParams)) *Store_CreateSecretAlert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateSecretAlertParams))
	})
	return _c
}

func (_c *Store_CreateSecretAlert_Call) Return(_a0 error) *Store_CreateSecretAlert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_CreateSecretAlert_Call) RunAndReturn(run func(context.Context, db.CreateSecretAlertParams) error) *Store_CreateSecretAlert_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, arg
func (_m *Store) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateUserParams) (db.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateUserParams) db.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type Store_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateUserParams
func (_e *Store_Expecter) CreateUser(ctx interface{}, arg interface{}) *Store_CreateUser_Call {
	return &Store_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, arg)}
}

func (_c *Store_CreateUser_Call) Run(run func(ctx context.Context, arg db.CreateUserParams)) *Store_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateUserParams))
	})
	return _c
}

func (_c *Store_CreateUser_Call) Return(_a0 db.User, _a1 error) *Store_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateUser_Call) RunAndReturn(run func(context.Context, db.CreateUserParams) (db.User, error)) *Store_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserForGithub provides a mock function with given fields: ctx, arg
func (_m *Store) CreateUserForGithub(ctx context.Context, arg []db.CreateUserForGithubParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserForGithub")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []db.CreateUserForGithubParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []db.CreateUserForGithubParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []db.CreateUserForGithubParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateUserForGithub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserForGithub'
type Store_CreateUserForGithub_Call struct {
	*mock.Call
}

// CreateUserForGithub is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []db.CreateUserForGithubParams
func (_e *Store_Expecter) CreateUserForGithub(ctx interface{}, arg interface{}) *Store_CreateUserForGithub_Call {
	return &Store_CreateUserForGithub_Call{Call: _e.mock.On("CreateUserForGithub", ctx, arg)}
}

func (_c *Store_CreateUserForGithub_Call) Run(run func(ctx context.Context, arg []db.CreateUserForGithubParams)) *Store_CreateUserForGithub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]db.CreateUserForGithubParams))
	})
	return _c
}

func (_c *Store_CreateUserForGithub_Call) Return(_a0 int64, _a1 error) *Store_CreateUserForGithub_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateUserForGithub_Call) RunAndReturn(run func(context.Context, []db.CreateUserForGithubParams) (int64, error)) *Store_CreateUserForGithub_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlertConfigByName provides a mock function with given fields: ctx, arg
func (_m *Store) GetAlertConfigByName(ctx context.Context, arg db.GetAlertConfigByNameParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetAlertConfigByName")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.GetAlertConfigByNameParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.GetAlertConfigByNameParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.GetAlertConfigByNameParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetAlertConfigByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlertConfigByName'
type Store_GetAlertConfigByName_Call struct {
	*mock.Call
}

// GetAlertConfigByName is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GetAlertConfigByNameParams
func (_e *Store_Expecter) GetAlertConfigByName(ctx interface{}, arg interface{}) *Store_GetAlertConfigByName_Call {
	return &Store_GetAlertConfigByName_Call{Call: _e.mock.On("GetAlertConfigByName", ctx, arg)}
}

func (_c *Store_GetAlertConfigByName_Call) Run(run func(ctx context.Context, arg db.GetAlertConfigByNameParams)) *Store_GetAlertConfigByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.GetAlertConfigByNameParams))
	})
	return _c
}

func (_c *Store_GetAlertConfigByName_Call) Return(_a0 int64, _a1 error) *Store_GetAlertConfigByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetAlertConfigByName_Call) RunAndReturn(run func(context.Context, db.GetAlertConfigByNameParams) (int64, error)) *Store_GetAlertConfigByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommitByCommitID provides a mock function with given fields: ctx, commitID
func (_m *Store) GetCommitByCommitID(ctx context.Context, commitID string) (int64, error) {
	ret := _m.Called(ctx, commitID)

	if len(ret) == 0 {
		panic("no return value specified for GetCommitByCommitID")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, commitID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, commitID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, commitID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetCommitByCommitID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommitByCommitID'
type Store_GetCommitByCommitID_Call struct {
	*mock.Call
}

// GetCommitByCommitID is a helper method to define mock.On call
//   - ctx context.Context
//   - commitID string
func (_e *Store_Expecter) GetCommitByCommitID(ctx interface{}, commitID interface{}) *Store_GetCommitByCommitID_Call {
	return &Store_GetCommitByCommitID_Call{Call: _e.mock.On("GetCommitByCommitID", ctx, commitID)}
}

func (_c *Store_GetCommitByCommitID_Call) Run(run func(ctx context.Context, commitID string)) *Store_GetCommitByCommitID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Store_GetCommitByCommitID_Call) Return(_a0 int64, _a1 error) *Store_GetCommitByCommitID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetCommitByCommitID_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *Store_GetCommitByCommitID_Call {
	_c.Call.Return(run)
	return _c
}

// GetGithubInstallation provides a mock function with given fields: ctx, arg
func (_m *Store) GetGithubInstallation(ctx context.Context, arg db.GetGithubInstallationParams) (db.GitProvider, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetGithubInstallation")
	}

	var r0 db.GitProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.GetGithubInstallationParams) (db.GitProvider, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.GetGithubInstallationParams) db.GitProvider); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.GitProvider)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.GetGithubInstallationParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetGithubInstallation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGithubInstallation'
type Store_GetGithubInstallation_Call struct {
	*mock.Call
}

// GetGithubInstallation is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GetGithubInstallationParams
func (_e *Store_Expecter) GetGithubInstallation(ctx interface{}, arg interface{}) *Store_GetGithubInstallation_Call {
	return &Store_GetGithubInstallation_Call{Call: _e.mock.On("GetGithubInstallation", ctx, arg)}
}

func (_c *Store_GetGithubInstallation_Call) Run(run func(ctx context.Context, arg db.GetGithubInstallationParams)) *Store_GetGithubInstallation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.GetGithubInstallationParams))
	})
	return _c
}

func (_c *Store_GetGithubInstallation_Call) Return(_a0 db.GitProvider, _a1 error) *Store_GetGithubInstallation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetGithubInstallation_Call) RunAndReturn(run func(context.Context, db.GetGithubInstallationParams) (db.GitProvider, error)) *Store_GetGithubInstallation_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgByEntity provides a mock function with given fields: ctx, arg
func (_m *Store) GetOrgByEntity(ctx context.Context, arg db.GetOrgByEntityParams) (db.Organisation, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgByEntity")
	}

	var r0 db.Organisation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.GetOrgByEntityParams) (db.Organisation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.GetOrgByEntityParams) db.Organisation); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Organisation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.GetOrgByEntityParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetOrgByEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgByEntity'
type Store_GetOrgByEntity_Call struct {
	*mock.Call
}

// GetOrgByEntity is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GetOrgByEntityParams
func (_e *Store_Expecter) GetOrgByEntity(ctx interface{}, arg interface{}) *Store_GetOrgByEntity_Call {
	return &Store_GetOrgByEntity_Call{Call: _e.mock.On("GetOrgByEntity", ctx, arg)}
}

func (_c *Store_GetOrgByEntity_Call) Run(run func(ctx context.Context, arg db.GetOrgByEntityParams)) *Store_GetOrgByEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.GetOrgByEntityParams))
	})
	return _c
}

func (_c *Store_GetOrgByEntity_Call) Return(_a0 db.Organisation, _a1 error) *Store_GetOrgByEntity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetOrgByEntity_Call) RunAndReturn(run func(context.Context, db.GetOrgByEntityParams) (db.Organisation, error)) *Store_GetOrgByEntity_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepoByEntity provides a mock function with given fields: ctx, arg
func (_m *Store) GetRepoByEntity(ctx context.Context, arg db.GetRepoByEntityParams) (db.Repo, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetRepoByEntity")
	}

	var r0 db.Repo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.GetRepoByEntityParams) (db.Repo, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.GetRepoByEntityParams) db.Repo); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Repo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.GetRepoByEntityParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetRepoByEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepoByEntity'
type Store_GetRepoByEntity_Call struct {
	*mock.Call
}

// GetRepoByEntity is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GetRepoByEntityParams
func (_e *Store_Expecter) GetRepoByEntity(ctx interface{}, arg interface{}) *Store_GetRepoByEntity_Call {
	return &Store_GetRepoByEntity_Call{Call: _e.mock.On("GetRepoByEntity", ctx, arg)}
}

func (_c *Store_GetRepoByEntity_Call) Run(run func(ctx context.Context, arg db.GetRepoByEntityParams)) *Store_GetRepoByEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.GetRepoByEntityParams))
	})
	return _c
}

func (_c *Store_GetRepoByEntity_Call) Return(_a0 db.Repo, _a1 error) *Store_GetRepoByEntity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetRepoByEntity_Call) RunAndReturn(run func(context.Context, db.GetRepoByEntityParams) (db.Repo, error)) *Store_GetRepoByEntity_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepoCountForOrg provides a mock function with given fields: ctx, org
func (_m *Store) GetRepoCountForOrg(ctx context.Context, org int64) (int64, error) {
	ret := _m.Called(ctx, org)

	if len(ret) == 0 {
		panic("no return value specified for GetRepoCountForOrg")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int64, error)); ok {
		return rf(ctx, org)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, org)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetRepoCountForOrg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepoCountForOrg'
type Store_GetRepoCountForOrg_Call struct {
	*mock.Call
}

// GetRepoCountForOrg is a helper method to define mock.On call
//   - ctx context.Context
//   - org int64
func (_e *Store_Expecter) GetRepoCountForOrg(ctx interface{}, org interface{}) *Store_GetRepoCountForOrg_Call {
	return &Store_GetRepoCountForOrg_Call{Call: _e.mock.On("GetRepoCountForOrg", ctx, org)}
}

func (_c *Store_GetRepoCountForOrg_Call) Run(run func(ctx context.Context, org int64)) *Store_GetRepoCountForOrg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Store_GetRepoCountForOrg_Call) Return(_a0 int64, _a1 error) *Store_GetRepoCountForOrg_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetRepoCountForOrg_Call) RunAndReturn(run func(context.Context, int64) (int64, error)) *Store_GetRepoCountForOrg_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *Store) GetUserByEmail(ctx context.Context, email string) (db.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type Store_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *Store_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *Store_GetUserByEmail_Call {
	return &Store_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *Store_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *Store_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Store_GetUserByEmail_Call) Return(_a0 db.User, _a1 error) *Store_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (db.User, error)) *Store_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEntityId provides a mock function with given fields: ctx, uuid
func (_m *Store) GetUserByEntityId(ctx context.Context, uuid string) (db.User, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEntityId")
	}

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.User, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.User); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetUserByEntityId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEntityId'
type Store_GetUserByEntityId_Call struct {
	*mock.Call
}

// GetUserByEntityId is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *Store_Expecter) GetUserByEntityId(ctx interface{}, uuid interface{}) *Store_GetUserByEntityId_Call {
	return &Store_GetUserByEntityId_Call{Call: _e.mock.On("GetUserByEntityId", ctx, uuid)}
}

func (_c *Store_GetUserByEntityId_Call) Run(run func(ctx context.Context, uuid string)) *Store_GetUserByEntityId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Store_GetUserByEntityId_Call) Return(_a0 db.User, _a1 error) *Store_GetUserByEntityId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetUserByEntityId_Call) RunAndReturn(run func(context.Context, string) (db.User, error)) *Store_GetUserByEntityId_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByGithubId provides a mock function with given fields: ctx, githubUserID
func (_m *Store) GetUserByGithubId(ctx context.Context, githubUserID pgtype.Int8) (db.User, error) {
	ret := _m.Called(ctx, githubUserID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByGithubId")
	}

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Int8) (db.User, error)); ok {
		return rf(ctx, githubUserID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgtype.Int8) db.User); ok {
		r0 = rf(ctx, githubUserID)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgtype.Int8) error); ok {
		r1 = rf(ctx, githubUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetUserByGithubId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByGithubId'
type Store_GetUserByGithubId_Call struct {
	*mock.Call
}

// GetUserByGithubId is a helper method to define mock.On call
//   - ctx context.Context
//   - githubUserID pgtype.Int8
func (_e *Store_Expecter) GetUserByGithubId(ctx interface{}, githubUserID interface{}) *Store_GetUserByGithubId_Call {
	return &Store_GetUserByGithubId_Call{Call: _e.mock.On("GetUserByGithubId", ctx, githubUserID)}
}

func (_c *Store_GetUserByGithubId_Call) Run(run func(ctx context.Context, githubUserID pgtype.Int8)) *Store_GetUserByGithubId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgtype.Int8))
	})
	return _c
}

func (_c *Store_GetUserByGithubId_Call) Return(_a0 db.User, _a1 error) *Store_GetUserByGithubId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetUserByGithubId_Call) RunAndReturn(run func(context.Context, pgtype.Int8) (db.User, error)) *Store_GetUserByGithubId_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserPassword provides a mock function with given fields: ctx, arg
func (_m *Store) UpdateUserPassword(ctx context.Context, arg db.UpdateUserPasswordParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateUserPasswordParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_UpdateUserPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserPassword'
type Store_UpdateUserPassword_Call struct {
	*mock.Call
}

// UpdateUserPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateUserPasswordParams
func (_e *Store_Expecter) UpdateUserPassword(ctx interface{}, arg interface{}) *Store_UpdateUserPassword_Call {
	return &Store_UpdateUserPassword_Call{Call: _e.mock.On("UpdateUserPassword", ctx, arg)}
}

func (_c *Store_UpdateUserPassword_Call) Run(run func(ctx context.Context, arg db.UpdateUserPasswordParams)) *Store_UpdateUserPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateUserPasswordParams))
	})
	return _c
}

func (_c *Store_UpdateUserPassword_Call) Return(_a0 error) *Store_UpdateUserPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_UpdateUserPassword_Call) RunAndReturn(run func(context.Context, db.UpdateUserPasswordParams) error) *Store_UpdateUserPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
