// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: org.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrganiation = `-- name: CreateOrganiation :one
INSERT INTO organisations (
  name, domain, provider, github_org_id
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, uuid, name, org_unit, provider, creds, tier, domain, github_org_id, created_at, updated_at
`

type CreateOrganiationParams struct {
	Name        string      `json:"name"`
	Domain      pgtype.Text `json:"domain"`
	Provider    string      `json:"provider"`
	GithubOrgID pgtype.Int8 `json:"github_org_id"`
}

// CreateOrganiation
//
//	INSERT INTO organisations (
//	  name, domain, provider, github_org_id
//	) VALUES (
//	  $1, $2, $3, $4
//	)
//	RETURNING id, uuid, name, org_unit, provider, creds, tier, domain, github_org_id, created_at, updated_at
func (q *Queries) CreateOrganiation(ctx context.Context, arg CreateOrganiationParams) (Organisation, error) {
	row := q.db.QueryRow(ctx, createOrganiation,
		arg.Name,
		arg.Domain,
		arg.Provider,
		arg.GithubOrgID,
	)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.OrgUnit,
		&i.Provider,
		&i.Creds,
		&i.Tier,
		&i.Domain,
		&i.GithubOrgID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrgByEntity = `-- name: GetOrgByEntity :one
SELECT id, uuid, name, org_unit, provider, creds, tier, domain, github_org_id, created_at, updated_at FROM organisations
WHERE domain = COALESCE($1, domain) AND
id = COALESCE($2, id) AND 
name = COALESCE($3, name) AND
github_org_id = COALESCE($4, github_org_id)
 LIMIT 1
`

type GetOrgByEntityParams struct {
	Domain      pgtype.Text `json:"domain"`
	ID          pgtype.Int8 `json:"id"`
	Name        pgtype.Text `json:"name"`
	GithubOrgID pgtype.Int8 `json:"github_org_id"`
}

// GetOrgByEntity
//
//	SELECT id, uuid, name, org_unit, provider, creds, tier, domain, github_org_id, created_at, updated_at FROM organisations
//	WHERE domain = COALESCE($1, domain) AND
//	id = COALESCE($2, id) AND
//	name = COALESCE($3, name) AND
//	github_org_id = COALESCE($4, github_org_id)
//	 LIMIT 1
func (q *Queries) GetOrgByEntity(ctx context.Context, arg GetOrgByEntityParams) (Organisation, error) {
	row := q.db.QueryRow(ctx, getOrgByEntity,
		arg.Domain,
		arg.ID,
		arg.Name,
		arg.GithubOrgID,
	)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.OrgUnit,
		&i.Provider,
		&i.Creds,
		&i.Tier,
		&i.Domain,
		&i.GithubOrgID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrgByID = `-- name: GetOrgByID :one
SELECT id, uuid, name, org_unit, provider, creds, tier, domain, github_org_id, created_at, updated_at FROM organisations
WHERE id = COALESCE($1, id)
 LIMIT 1
`

// GetOrgByID
//
//	SELECT id, uuid, name, org_unit, provider, creds, tier, domain, github_org_id, created_at, updated_at FROM organisations
//	WHERE id = COALESCE($1, id)
//	 LIMIT 1
func (q *Queries) GetOrgByID(ctx context.Context, id pgtype.Int8) (Organisation, error) {
	row := q.db.QueryRow(ctx, getOrgByID, id)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.OrgUnit,
		&i.Provider,
		&i.Creds,
		&i.Tier,
		&i.Domain,
		&i.GithubOrgID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
