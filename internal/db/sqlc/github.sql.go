// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: github.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGithubInstallation = `-- name: CreateGithubInstallation :exec
INSERT INTO git_provider (
    org_name, org_id, type, token , vcs_org_id, install_id)
VALUES ( $1, $2, $3, $4 , $5, $6)
`

type CreateGithubInstallationParams struct {
	OrgName   string      `json:"org_name"`
	OrgID     int64       `json:"org_id"`
	Type      string      `json:"type"`
	Token     pgtype.Text `json:"token"`
	VcsOrgID  int64       `json:"vcs_org_id"`
	InstallID int64       `json:"install_id"`
}

// CreateGithubInstallation
//
//	INSERT INTO git_provider (
//	    org_name, org_id, type, token , vcs_org_id, install_id)
//	VALUES ( $1, $2, $3, $4 , $5, $6)
func (q *Queries) CreateGithubInstallation(ctx context.Context, arg CreateGithubInstallationParams) error {
	_, err := q.db.Exec(ctx, createGithubInstallation,
		arg.OrgName,
		arg.OrgID,
		arg.Type,
		arg.Token,
		arg.VcsOrgID,
		arg.InstallID,
	)
	return err
}

const getGithubInstallation = `-- name: GetGithubInstallation :one
SELECT id, uuid, org_name, org_id, type, vcs_org_id, install_id, token, created_at, updated_at FROM git_provider
WHERE org_name = COALESCE($1, org_name) AND
 org_id = COALESCE($2, org_id) AND 
 vcs_org_id = COALESCE($3, vcs_org_id)
 LIMIT 1
`

type GetGithubInstallationParams struct {
	OrgName  pgtype.Text `json:"org_name"`
	OrgID    pgtype.Int8 `json:"org_id"`
	VcsOrgID pgtype.Int8 `json:"vcs_org_id"`
}

// GetGithubInstallation
//
//	SELECT id, uuid, org_name, org_id, type, vcs_org_id, install_id, token, created_at, updated_at FROM git_provider
//	WHERE org_name = COALESCE($1, org_name) AND
//	 org_id = COALESCE($2, org_id) AND
//	 vcs_org_id = COALESCE($3, vcs_org_id)
//	 LIMIT 1
func (q *Queries) GetGithubInstallation(ctx context.Context, arg GetGithubInstallationParams) (GitProvider, error) {
	row := q.db.QueryRow(ctx, getGithubInstallation, arg.OrgName, arg.OrgID, arg.VcsOrgID)
	var i GitProvider
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.OrgName,
		&i.OrgID,
		&i.Type,
		&i.VcsOrgID,
		&i.InstallID,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
