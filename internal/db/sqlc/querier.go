// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	//CreateAlertConfig
	//
	//  INSERT INTO alert_config (
	//      org, type, severity, matcher, regex, "desc", is_active, alert_type )
	//  VALUES ( $1, $2, $3, $4, $5, $6, $7, $8 ) RETURNING id
	CreateAlertConfig(ctx context.Context, arg CreateAlertConfigParams) (int64, error)
	//CreateCommmitsFromRPC
	//
	//  INSERT INTO commits_cli (
	//    commit_id, repo, author, commit_time, org, user_id,
	//    push_time, sessionid, source, user_repo_url
	//  ) VALUES (
	//      $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
	//  )
	CreateCommmitsFromRPC(ctx context.Context, arg []CreateCommmitsFromRPCParams) (int64, error)
	//CreateGithubInstallation
	//
	//  INSERT INTO git_provider (
	//      org_name, org_id, type, token , vcs_org_id, install_id)
	//  VALUES ( $1, $2, $3, $4 , $5, $6)
	CreateGithubInstallation(ctx context.Context, arg CreateGithubInstallationParams) error
	//CreateMetaData
	//
	//  INSERT INTO metadata (
	//    "user_id", "org", data_type, data_value
	//  ) VALUES (
	//    $1, $2, $3, $4
	//  )
	CreateMetaData(ctx context.Context, arg CreateMetaDataParams) error
	//CreateOrganiation
	//
	//  INSERT INTO organisations (
	//    name, domain, provider, github_org_id
	//  ) VALUES (
	//    $1, $2, $3, $4
	//  )
	//  RETURNING id, uuid, name, org_unit, provider, creds, tier, domain, github_org_id, created_at, updated_at
	CreateOrganiation(ctx context.Context, arg CreateOrganiationParams) (Organisation, error)
	//CreateRepoWithProvider
	//
	//  INSERT INTO repos (
	//      name, repourl, provider, org, vcs_repo_id)
	//  VALUES ( $1, $2, $3, $4, $5)
	CreateRepoWithProvider(ctx context.Context, arg []CreateRepoWithProviderParams) (int64, error)
	//CreateSecretAlert
	//
	//  INSERT INTO alerts (
	//      file_name, commit_id, source, status, file_path, alert_config_id, org_id)
	//  VALUES ( $1, $2, $3, $4, $5, $6, $7 )
	CreateSecretAlert(ctx context.Context, arg CreateSecretAlertParams) error
	//CreateUser
	//
	//  INSERT INTO users (
	//    email, org, hash_password
	//  ) VALUES (
	//    $1, $2, $3
	//  )
	//  RETURNING id, uuid, email, hash_password, provider, org, role, github_user_id, github_user_name, created_at, updated_at
	CreateUser(ctx context.Context, arg CreateUserParams) (User, error)
	//CreateUserForGithub
	//
	//  INSERT INTO users (
	//    org, github_user_id, github_user_name, email, hash_password, provider
	//  ) VALUES (
	//    $1, $2, $3, $4, $5, $6
	//  )
	CreateUserForGithub(ctx context.Context, arg []CreateUserForGithubParams) (int64, error)
	//CreateVCSCommit
	//
	//  INSERT INTO commit_webhooks (
	//    commit_id, repo_id, author_name, author_email, commit_time, org, provider , scanned_by_cli,
	//    scanned_by_runner
	//  ) VALUES (
	//      $1, $2, $3, $4, $5, $6, $7, $8, $9
	//  )
	CreateVCSCommit(ctx context.Context, arg []CreateVCSCommitParams) (int64, error)
	//GetAlertBuckets
	//
	//  WITH all_severities AS (
	//      SELECT 'critical' AS severity
	//      UNION ALL
	//      SELECT 'high'
	//      UNION ALL
	//      SELECT 'medium'
	//      UNION ALL
	//      SELECT 'low'
	//  ),
	//  historical_total AS (
	//    SELECT
	//      s.severity,
	//      (
	//        SELECT COUNT(*)
	//        FROM alerts a
	//        INNER JOIN alert_config ac ON a.alert_config_id = ac.id
	//        WHERE
	//          ac.severity = s.severity
	//          AND a.org_id = $1
	//          AND a.created_at < (current_date - INTERVAL '1 MONTH')
	//      ) AS total_prior_alerts
	//    FROM all_severities s
	//  ),
	//  all_buckets AS (
	//    SELECT
	//      generated_time AS bucket_start,
	//      LEAST( -- for last bucket
	//        generated_time + INTERVAL '4 days' - INTERVAL '1 second',
	//        current_date + INTERVAL '1 days' - INTERVAL '1 second'
	//      ) AS bucket_end
	//    FROM generate_series(
	//      current_date - INTERVAL '1 MONTH',
	//      current_date,
	//      '4 days'::interval
	//    ) AS generated_time
	//  ),
	//  recent_buckets_data AS (
	//    SELECT
	//      (date_bin(
	//        '4 days',
	//        a.created_at,
	//        current_date - INTERVAL '1 MONTH'
	//      ) + INTERVAL '4 days' - INTERVAL '1 second') AS bucket_end,
	//      ac.severity,
	//      COUNT(*) AS alert_count
	//    FROM alerts a
	//    INNER JOIN alert_config ac ON a.alert_config_id = ac.id
	//    WHERE
	//      a.org_id = $1
	//      AND a.created_at >= (current_date - INTERVAL '1 MONTH')
	//    GROUP BY bucket_end, ac.severity
	//  ),
	//  recent_buckets AS (
	//    SELECT
	//      b.bucket_end,
	//      s.severity,
	//      COALESCE(r.alert_count, 0) AS alert_count
	//    FROM all_buckets b
	//    CROSS JOIN all_severities s
	//    LEFT JOIN recent_buckets_data r
	//      ON b.bucket_end = r.bucket_end AND s.severity = r.severity
	//    WHERE b.bucket_end <= current_date + INTERVAL '1 day' - INTERVAL '1 second'  -- Ensure no future buckets
	//  )
	//  SELECT
	//    rb.bucket_end,
	//    rb.severity,
	//    rb.alert_count AS period_count,
	//    (
	//      SUM(rb.alert_count) OVER (
	//      PARTITION BY rb.severity
	//      ORDER BY rb.bucket_end
	//      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
	//      ) + COALESCE(ht.total_prior_alerts, 0)
	//    )::bigint AS cumulative_count
	//  FROM recent_buckets rb
	//  LEFT JOIN historical_total ht USING (severity)
	//  ORDER BY rb.bucket_end, rb.severity
	GetAlertBuckets(ctx context.Context, orgID int64) ([]GetAlertBucketsRow, error)
	//GetAlertConfigByName
	//
	//  SELECT id FROM alert_config
	//  WHERE org = $1
	//  AND type = $2
	//  LIMIT 1
	GetAlertConfigByName(ctx context.Context, arg GetAlertConfigByNameParams) (int64, error)
	//GetCommitByCommitID
	//
	//  SELECT id FROM commits_cli
	//  WHERE commit_id = $1
	//  LIMIT 1
	GetCommitByCommitID(ctx context.Context, commitID string) (int64, error)
	//GetCommitsHealth
	//
	//  SELECT
	//      COUNT(*) AS total_commits,
	//      COUNT(*) FILTER (WHERE scanned_by_cli IS NOT TRUE) AS not_scanned_count
	//  FROM commit_webhooks
	//  WHERE org = $1
	GetCommitsHealth(ctx context.Context, org int64) (GetCommitsHealthRow, error)
	//GetGithubInstallation
	//
	//  SELECT id, uuid, org_name, org_id, type, vcs_org_id, install_id, token, created_at, updated_at FROM git_provider
	//  WHERE org_name = COALESCE($1, org_name) AND
	//   org_id = COALESCE($2, org_id) AND
	//   vcs_org_id = COALESCE($3, vcs_org_id)
	//   LIMIT 1
	GetGithubInstallation(ctx context.Context, arg GetGithubInstallationParams) (GitProvider, error)
	//GetOrgByEntity
	//
	//  SELECT id, uuid, name, org_unit, provider, creds, tier, domain, github_org_id, created_at, updated_at FROM organisations
	//  WHERE domain = COALESCE($1, domain) AND
	//  id = COALESCE($2, id) AND
	//  name = COALESCE($3, name) AND
	//  github_org_id = COALESCE($4, github_org_id)
	//   LIMIT 1
	GetOrgByEntity(ctx context.Context, arg GetOrgByEntityParams) (Organisation, error)
	//GetOrgByID
	//
	//  SELECT id, uuid, name, org_unit, provider, creds, tier, domain, github_org_id, created_at, updated_at FROM organisations
	//  WHERE id = COALESCE($1, id)
	//   LIMIT 1
	GetOrgByID(ctx context.Context, id pgtype.Int8) (Organisation, error)
	//GetRepoByEntity
	//
	//  SELECT id, uuid, name, repourl, provider, org, vcs_repo_id, created_at, updated_at FROM repos
	//  WHERE repourl = COALESCE($1, repourl) AND
	//  provider = COALESCE($2, provider) AND
	//  org = COALESCE($3, org) AND
	//  vcs_repo_id = COALESCE($4, vcs_repo_id)
	//   LIMIT 1
	GetRepoByEntity(ctx context.Context, arg GetRepoByEntityParams) (Repo, error)
	//GetRepoCountForOrg
	//
	//  select COUNT(*) FROM repos WHERE
	//  org = $1
	GetRepoCountForOrg(ctx context.Context, org int64) (int64, error)
	//GetSecretTypeCount
	//
	//  SELECT
	//      ac.type,
	//      COUNT(a.id) AS count
	//  FROM
	//      alerts a
	//  JOIN
	//      alert_config ac ON a.alert_config_id = ac.id
	//  WHERE
	//      a.org_id = $1
	//  GROUP BY
	//      ac.type
	//  ORDER BY
	//      count DESC
	GetSecretTypeCount(ctx context.Context, orgID int64) ([]GetSecretTypeCountRow, error)
	//GetTotalAlertCount
	//
	//  SELECT COUNT(*) AS count
	//  FROM alerts
	//  WHERE org_id = $1
	GetTotalAlertCount(ctx context.Context, orgID int64) (int64, error)
	//GetUniqueCommitUsernames
	//
	//  SELECT
	//      author_name
	//  FROM commit_webhooks
	//  WHERE org = $1
	//  GROUP BY author_name
	GetUniqueCommitUsernames(ctx context.Context, org int64) ([]string, error)
	//GetUserByEmail
	//
	//  SELECT id, uuid, email, hash_password, provider, org, role, github_user_id, github_user_name, created_at, updated_at FROM users
	//  WHERE email = $1
	//  LIMIT 1
	GetUserByEmail(ctx context.Context, email string) (User, error)
	//GetUserByEntityId
	//
	//  SELECT id, uuid, email, hash_password, provider, org, role, github_user_id, github_user_name, created_at, updated_at FROM users
	//  WHERE uuid = $1
	//  LIMIT 1
	GetUserByEntityId(ctx context.Context, uuid string) (User, error)
	//GetUserByGithubId
	//
	//  SELECT id, uuid, email, hash_password, provider, org, role, github_user_id, github_user_name, created_at, updated_at FROM users
	//  WHERE github_user_id = $1
	//  LIMIT 1
	GetUserByGithubId(ctx context.Context, githubUserID pgtype.Int8) (User, error)
	// -- name: GetAlertForEntity :many
	// SELECT * FROM alerts
	// WHERE org_id = COALESCE(sqlc.narg(org_id), org_id) AND
	// repo_id = COALESCE(sqlc.narg(repo_id), repo_id) AND
	// status =  COALESCE(sqlc.narg(status), status)
	// LIMIT sqlc.arg(count);
	// WITH org_metrics AS (
	//     SELECT
	//         COUNT(*) FILTER (WHERE created_at >= CURRENT_DATE - INTERVAL '7 days') AS recent_count,
	//         COUNT(*) FILTER (WHERE source = 'axi-cli') AS protected_count,
	//         COUNT(*) FILTER (WHERE source = 'axi-runner') AS bypassed_count
	//     FROM
	//         alerts
	//     WHERE
	//         org = $1
	// )
	// SELECT
	//     COALESCE(m.recent_count, 0) AS alerts_last_7_days,
	//     COALESCE(m.protected_count, 0) AS alerts_protected,
	//     COALESCE(m.bypassed_count, 0) AS alerts_bypassed
	// FROM
	//     organisations o
	// CROSS JOIN
	//     org_metrics m
	// WHERE
	//     o.id = $1;
	//
	//
	//
	//
	//  SELECT
	//      r.id AS repo_id,
	//      r.name AS repo_name,
	//      COUNT(a.id) AS alert_count
	//  FROM
	//      repos r
	//  JOIN
	//      commits_cli cc ON r.id = cc.repo
	//  JOIN
	//      alerts a ON cc.id = a.commit_id
	//  WHERE
	//      r.org = $1
	//  GROUP BY
	//      r.id, r.name
	//  ORDER BY
	//      alert_count DESC
	//  LIMIT 10
	GetWeeklyStats(ctx context.Context, org int64) (GetWeeklyStatsRow, error)
	//LinkRepoInCommitCli
	//
	//  UPDATE commits_cli
	//  SET repo = $2
	//  WHERE commit_id = $1 AND org = $3
	LinkRepoInCommitCli(ctx context.Context, arg LinkRepoInCommitCliParams) error
	//Top10RepoBySecretCount
	//
	//  SELECT
	//      r.repourl AS repo_name,
	//      COUNT(a.id) AS secret_count
	//  FROM
	//      repos r
	//  JOIN
	//      commit_webhooks cw ON r.id = cw.repo_id
	//  JOIN
	//      alerts a ON cw.id = a.commit_id
	//  JOIN
	//      alert_config ac ON a.alert_config_id = ac.id
	//  WHERE
	//      ac.alert_type = 'secret'
	//      AND r.org = $1
	//  GROUP BY
	//      r.repourl
	//  ORDER BY
	//      secret_count DESC
	//  LIMIT 10
	Top10RepoBySecretCount(ctx context.Context, org int64) ([]Top10RepoBySecretCountRow, error)
	//UpdateUserPassword
	//
	//
	//  UPDATE users SET hash_password = $1 WHERE email = $2
	UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error
}

var _ Querier = (*Queries)(nil)
