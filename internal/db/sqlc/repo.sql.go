// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: repo.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type CreateRepoWithProviderParams struct {
	Name      string `json:"name"`
	Repourl   string `json:"repourl"`
	Provider  string `json:"provider"`
	Org       int64  `json:"org"`
	VcsRepoID int64  `json:"vcs_repo_id"`
}

const getRepoByEntity = `-- name: GetRepoByEntity :one
SELECT id, uuid, name, repourl, provider, org, vcs_repo_id, created_at, updated_at FROM repos
WHERE repourl = COALESCE($1, repourl) AND
provider = COALESCE($2, provider) AND 
org = COALESCE($3, org) AND
vcs_repo_id = COALESCE($4, vcs_repo_id)
 LIMIT 1
`

type GetRepoByEntityParams struct {
	Repourl   pgtype.Text `json:"repourl"`
	Provider  pgtype.Text `json:"provider"`
	Org       pgtype.Int8 `json:"org"`
	VcsRepoID pgtype.Int8 `json:"vcs_repo_id"`
}

// GetRepoByEntity
//
//	SELECT id, uuid, name, repourl, provider, org, vcs_repo_id, created_at, updated_at FROM repos
//	WHERE repourl = COALESCE($1, repourl) AND
//	provider = COALESCE($2, provider) AND
//	org = COALESCE($3, org) AND
//	vcs_repo_id = COALESCE($4, vcs_repo_id)
//	 LIMIT 1
func (q *Queries) GetRepoByEntity(ctx context.Context, arg GetRepoByEntityParams) (Repo, error) {
	row := q.db.QueryRow(ctx, getRepoByEntity,
		arg.Repourl,
		arg.Provider,
		arg.Org,
		arg.VcsRepoID,
	)
	var i Repo
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Name,
		&i.Repourl,
		&i.Provider,
		&i.Org,
		&i.VcsRepoID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRepoCountForOrg = `-- name: GetRepoCountForOrg :one
select COUNT(*) FROM repos WHERE 
org = $1
`

// GetRepoCountForOrg
//
//	select COUNT(*) FROM repos WHERE
//	org = $1
func (q *Queries) GetRepoCountForOrg(ctx context.Context, org int64) (int64, error) {
	row := q.db.QueryRow(ctx, getRepoCountForOrg, org)
	var count int64
	err := row.Scan(&count)
	return count, err
}
