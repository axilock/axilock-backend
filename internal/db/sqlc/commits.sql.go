// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: commits.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type CreateCommmitsFromRPCParams struct {
	CommitID    string             `json:"commit_id"`
	Repo        pgtype.Int8        `json:"repo"`
	Author      pgtype.Text        `json:"author"`
	CommitTime  pgtype.Timestamptz `json:"commit_time"`
	Org         int64              `json:"org"`
	UserID      int64              `json:"user_id"`
	PushTime    pgtype.Timestamptz `json:"push_time"`
	Sessionid   string             `json:"sessionid"`
	Source      string             `json:"source"`
	UserRepoUrl string             `json:"user_repo_url"`
}

type CreateVCSCommitParams struct {
	CommitID        string             `json:"commit_id"`
	RepoID          int64              `json:"repo_id"`
	AuthorName      string             `json:"author_name"`
	AuthorEmail     string             `json:"author_email"`
	CommitTime      pgtype.Timestamptz `json:"commit_time"`
	Org             int64              `json:"org"`
	Provider        string             `json:"provider"`
	ScannedByCli    pgtype.Bool        `json:"scanned_by_cli"`
	ScannedByRunner pgtype.Bool        `json:"scanned_by_runner"`
}

const getCommitByCommitID = `-- name: GetCommitByCommitID :one
SELECT id FROM commits_cli
WHERE commit_id = $1
LIMIT 1
`

// GetCommitByCommitID
//
//	SELECT id FROM commits_cli
//	WHERE commit_id = $1
//	LIMIT 1
func (q *Queries) GetCommitByCommitID(ctx context.Context, commitID string) (int64, error) {
	row := q.db.QueryRow(ctx, getCommitByCommitID, commitID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getCommitsHealth = `-- name: GetCommitsHealth :one
SELECT 
    COUNT(*) AS total_commits,
    COUNT(*) FILTER (WHERE scanned_by_cli IS NOT TRUE) AS not_scanned_count
FROM commit_webhooks
WHERE org = $1
`

type GetCommitsHealthRow struct {
	TotalCommits    int64 `json:"total_commits"`
	NotScannedCount int64 `json:"not_scanned_count"`
}

// GetCommitsHealth
//
//	SELECT
//	    COUNT(*) AS total_commits,
//	    COUNT(*) FILTER (WHERE scanned_by_cli IS NOT TRUE) AS not_scanned_count
//	FROM commit_webhooks
//	WHERE org = $1
func (q *Queries) GetCommitsHealth(ctx context.Context, org int64) (GetCommitsHealthRow, error) {
	row := q.db.QueryRow(ctx, getCommitsHealth, org)
	var i GetCommitsHealthRow
	err := row.Scan(&i.TotalCommits, &i.NotScannedCount)
	return i, err
}

const getUniqueCommitUsernames = `-- name: GetUniqueCommitUsernames :many
SELECT 
    author_name
FROM commit_webhooks
WHERE org = $1
GROUP BY author_name
`

// GetUniqueCommitUsernames
//
//	SELECT
//	    author_name
//	FROM commit_webhooks
//	WHERE org = $1
//	GROUP BY author_name
func (q *Queries) GetUniqueCommitUsernames(ctx context.Context, org int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getUniqueCommitUsernames, org)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var author_name string
		if err := rows.Scan(&author_name); err != nil {
			return nil, err
		}
		items = append(items, author_name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const linkRepoInCommitCli = `-- name: LinkRepoInCommitCli :exec
UPDATE commits_cli
SET repo = $2
WHERE commit_id = $1 AND org = $3
`

type LinkRepoInCommitCliParams struct {
	CommitID string      `json:"commit_id"`
	Repo     pgtype.Int8 `json:"repo"`
	Org      int64       `json:"org"`
}

// LinkRepoInCommitCli
//
//	UPDATE commits_cli
//	SET repo = $2
//	WHERE commit_id = $1 AND org = $3
func (q *Queries) LinkRepoInCommitCli(ctx context.Context, arg LinkRepoInCommitCliParams) error {
	_, err := q.db.Exec(ctx, linkRepoInCommitCli, arg.CommitID, arg.Repo, arg.Org)
	return err
}
